{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Auto-assigning NUTS sampler...\n",
      "Initializing NUTS using advi...\n",
      "Average ELBO = -43.179: 100%|██████████| 200000/200000 [02:05<00:00, 1591.32it/s]\n",
      "Finished [100%]: Average ELBO = -42.238\n",
      "100%|██████████| 5000/5000 [00:29<00:00, 169.35it/s]\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pymc3 as pm\n",
    "import theano.tensor as T\n",
    "\n",
    "xs = np.random.rand(20, 3) * np.random.rand(3) + (2 * np.random.rand(3))\n",
    "\n",
    "true_coeffs = np.array([3, 4.5, -2])\n",
    "true_intercept = 10\n",
    "\n",
    "ys = xs @ true_coeffs + true_intercept\n",
    "\n",
    "with pm.Model() as model:\n",
    "\n",
    "    betas = pm.MvNormal('beta', mu=0., cov=1E2 * np.eye(3), shape=3)\n",
    "    intercept = pm.Normal('intercept', mu=0., sd=1E6)\n",
    "\n",
    "    means = T.dot(xs, betas) + intercept\n",
    "\n",
    "    error = pm.Uniform('error', lower=0, upper=100)\n",
    "    cov = error * np.eye(len(ys))\n",
    "\n",
    "    y = pm.MvNormal('y', mu=means, cov=cov, observed=ys)\n",
    "    trace = pm.sample(5000, random_seed=123, tune=100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernelspec": {
   "display_name": "Python [default]",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
