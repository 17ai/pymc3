{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": true,
    "editable": true
   },
   "source": [
    "# Sampler statistics\n",
    "\n",
    "When checking for convergence or when debugging a badly behaving\n",
    "sampler, it is often helpful to take a closer look at what the\n",
    "sampler is doing. For this purpose some samplers export\n",
    "statistics for each generated sample."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sb\n",
    "import pandas as pd\n",
    "import pymc3 as pm \n",
    "\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": true,
    "editable": true
   },
   "source": [
    "As a minimal example we sample from a standard normal distribution:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": true,
    "deletable": true,
    "editable": true
   },
   "outputs": [],
   "source": [
    "model = pm.Model()\n",
    "with model:\n",
    "    mu1 = pm.Normal(\"mu1\", mu=0, sd=1, shape=10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 2000/2000 [00:18<00:00, 107.36it/s]\n"
     ]
    }
   ],
   "source": [
    "with model:\n",
    "    step = pm.NUTS()\n",
    "    trace = pm.sample(2000, tune=1000, init=None, step=step, njobs=2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": true,
    "editable": true
   },
   "source": [
    "NUTS provides the following statistics:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'depth',\n",
       " 'diverging',\n",
       " 'energy',\n",
       " 'energy_error',\n",
       " 'max_energy_error',\n",
       " 'mean_tree_accept',\n",
       " 'step_size',\n",
       " 'step_size_bar',\n",
       " 'tree_size',\n",
       " 'tune'}"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "trace.stat_names"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": true,
    "editable": true
   },
   "source": [
    "- `mean_tree_accept`: The mean acceptance probability for the tree that generated this sample. The mean of these values across all samples but the burn-in should be approximately `target_accept` (the default for this is 0.8).\n",
    "- `diverging`: Whether the trajectory for this sample diverged. If there are many diverging samples, this usually indicates that a region of the posterior has high curvature. Reparametrization can often help, but you can also try to increase `target_accept` to something like 0.9 or 0.95.\n",
    "- `energy`: The energy at the point in phase-space where the sample was accepted. This can be used to identify posteriors with problematically long tails. See below for an example.\n",
    "- `energy_error`: The difference in energy between the start and the end of the trajectory. For a perfect integrator this would always be zero.\n",
    "- `max_energy_error`: The maximum difference in energy along the whole trajectory.\n",
    "- `depth`: The depth of the tree that was used to generate this sample\n",
    "- `tree_size`: The number of leafs of the sampling tree, when the sample was accepted. This is usually a bit less than $2 ^ \\text{depth}$. If the tree size is large, the sampler is using a lot of leapfrog steps to find the next sample. This can for example happen if there are strong correlations in the posterior, if the posterior has long tails, if there are regions of high curvature (\"funnels\"), or if the variance estimates in the mass matrix are inaccurate. Reparametrisation of the model or estimating the posterior variances from past samples might help.\n",
    "- `tune`: This is `True`, if step size adaptation was turned on when this sample was generated.\n",
    "- `step_size`: The step size used for this sample.\n",
    "- `step_size_bar`: The current best known step-size. After the tuning samples, the step size is set to this value. This should converge during tuning."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": true,
    "editable": true
   },
   "source": [
    "If the name of the statistic does not clash with the name of one of the variables, we can use indexing to get the values. The values for the chains will be concatenated.\n",
    "\n",
    "We can see that the step sizes converged after the 1000 tuning samples for both chains to about the same value. The first 2000 values are from chain 1, the second 2000 from chain 2."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x1224dc940>]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\nnlORi4h47v8DlB+02l0r/DkAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1100114e0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(trace['step_size_bar'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": true,
    "editable": true
   },
   "source": [
    "The `get_sampler_stats` method provides more control over which values should be returned, and it also works if the name of the statistic is the same as the name of one of the variables. We can use the `chains` option, to control values from which chain should be returned, or we can set `combine=False` to get the values for the individual chains:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x12284ec50>]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXcAAAD3CAYAAADmBxSSAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAIABJREFUeJztvXmcHVWd9/++a3ff9JJOcpMQCBAQDquAAQGRRRx3HZkZ\nf/NzfBwHBcFlfuNPnXGQQX2cR0czLCOuIygyRhgRJA6gKIsdVgOaBEJCOCEL2ZO+6X27ez1/3KXv\nUnerW3ft7/v16lffqjrLt06d+tSpb53FYRgGgiAIQnvhbLQBgiAIgv2IuAuCILQhIu6CIAhtiIi7\nIAhCGyLiLgiC0Ia4G21AikBgwnK3nf5+HyMj03aaYwtiV2WIXZUhdlVGs9oF1dnm9/c4zPa3Rcvd\n7XY12gRTxK7KELsqQ+yqjGa1C2pjW1ktd6XU+cAqrfVlSqnXAXcCBrAZ+LTWOp4R1gl8HzgLCAFX\na6232224IAiCUJiSLXel1BeAHwGdyV23ADdorS8GHMD7c6JcAXRqrS8ErgNuts/c8skcnGU2UKuc\nwVuGYZQVrpaUY0MqTG64cveZpWflWKk4uXnn2m12zA47KrmOZuUlCK1IOW6ZHcBfZmyvBJ5I/n4Y\n+LOc8G8GfgugtV4HnFuljRUTjcW55sa13PnwVl47NM5VqwZ4fuvh9PEHn32Nq1YNMD4dLprOqrs2\ncMOPnqu1uQX57XN7uGrVAFetGuCF7UdMw6zXgXSYq1YNZB371zv/xP/5rz+lt797/0tctWqAP//H\nBxgeD5qmd9/aHVy1aoCZUDTv2I79Y1y1aoAN2wJln0MkGuOqVQPc9ei2tI3BcCLtr69en973rXtf\n5Mp/fQSAPYcn0vsj0Xhemnc9so2rVw0QicZK5p8qw2tuXFsy7PNbD3PVqgFeOzQOwFObDnDVqgH2\nHp4o+3wFoVko6ZbRWv9SKXV8xi6H1jrVnJkA+nKi9AJjGdsxpZRba52vFhn09/uq8jv5/T3p38Pj\nQWJxgydfPEhHhwdIiNZ7LnkdAGue3AnAobEQJx63sGCa2/aN5aVdjV2V8ouBWW/WQ8/u5m0XrsgL\nc3/Owyczv91JUUrtyxTl1wJTqBP9een9Zt1uACbCcY49Jtv2Ox5+BYA1T+3iHRedUNY5pITx8fX7\n0vumowbLj+5h54Hx9L5NO4bStt6XvD4AeFz4F3Vnpfn4hmRabjd+f/axXFJlGIsbJa/FL77/LADr\ntgY478yj+elvNQAD6/fykXefVjRuo6imftUSsaty7LbNSm+ZzKZUDzCac3w8uT+Fs5SwA1V9xfb7\newgEZltXo5Oh9O+ZYARI3NyZYQDGx2by9plRTphy7KqGaDRmmlYslt2yHRwcx+HI/nhuFm9iIljU\nttHRaQIBb9a+VFkaRn5ZFmJ4eMok7RkCPvP4gcBEOp9UfE8B18jw8BQeyneblLI5Hk+UZTAYzgtr\n13W0Ezvrl52IXZVTjW2FHgpWestsVEpdlvz9LuCpnOPPAO8GUEpdALxkIQ+hwZh/p0j8d5p2vKqV\nIXXMSxDaCCst988DtyulvMBW4D4ApdRPgRuANcDblFLPkvjg+lGbbBUaTDyeUNrcN4NKqTK6IAhl\nUJa4a61fAy5I/t4GXGoS5iMZm5+wwzihcgwST9Sq0zFpMceTO511VGdpuAuCNdpiEJNgP2aimhJ8\naXkLQvMj4t5u2NXULTI2oFq3jCAItUfEvUVoBvdE2i1TQa2p1m4ZRCQI1mh7ca93G7PQaMhKR1Ra\nzr9MOS3V+jZLJfVBNdPnbsXWYllXlJ68QAhCQdpe3OvNF29bx79mjAoF+M//2czVqwbS4lgMwzC4\n9qa1fOeXm6qy478fe7Wq+MV97glVfexPe7lq1QCHbZxp7+p/H8Aoo5wEQSiOiLvNDI7MsPtQ9mCE\n57cOYgChSOnh8gDRmMHGV82nGyhFSoAf/dNeS/FnEyq8K9Vgvjv5ANmgy5+OIBG/cJPbMCBsMuWA\nIAiVIeLeZDRLm9XMvdMIL4i43AXBGiLuzUaGmDXUpWwiqilfee4h0V9BaD5E3AVTigp2jafFzUxO\nHhyCYA0R9ybDqLLpbpfOFkun2iwa1U1eulUKc4k5I+6m3RMbYEcpCulPM+hSqpdMRaZUa7iNJ94E\nRSgIdWPOiPvcwbYhqmUfsv/BUyMZFnUX5hAi7k1MsS6DtaaRbwpGgd/VpyvqLswd5ry4x2usYrnp\nx01GsBaywYpvuprxP5l2mCVTyJ5KfdklR8eWm5xR2fXLDVoqbq3rhiDUkjkn7kNjs2uH/uBXm/l4\nzrqjdjITinJ1TvrX3riWW+55Ib29d3CSq1cNMJBcOq5aPfn8d5+xFG9sKpxtq1lXyPSh7INrntpl\nKc9CPPfy7Hq3uXb88okd6d9fueN5/im5NF6lbNs7ytWrBli35ZDp8fV6sCm+cwiCVeacuG/eNZS1\nXcv790BgMm9fLG6w5bWR9HZKyP778dR0AdVZNG2ysHU5bN83lrVt6sIo1NG9QqpxNv36D7vTv8PR\nOCMToSKhs8kU67Ub9wPwq6fNH0wPPvOaJfsEoVmYc+LeStSzy2BeXjXsClkJNvegtzU1QWhmrCyz\nh1LqSuDK5GYncDawVGs9mjz+WeBqIDXpyLVaa12VpW1AOa/5zeIKMPW5p45V3dG9yvgWaZayFYR6\nYEnctdZ3AncCKKW+B9yREvYkK4GPaK3XV2ugFWo5AKcayumtkR3CkbenVuQ13Iupex1L0c6BRxX1\nwpHphIUWpyq3jFLqXOB0rfVtOYdWAl9USj2tlPpiNXlUSzmujXqNXGzqlmMZ5WRX18yG6WYzl78g\n2IyllnsG1wNfNdn/c+B7wDiwRin1Xq31Q8US6u/34Xa7LBvi9/ekfzu9s6fV2elN7HM68ft76Onu\nzIu7aFEPTmdhyclMuxJ7xveNZu1bsGBeXpo+nze5x4Hf30Mw44Nopklut9PUDpcr//mcG84sXk9P\nZ9b+vsPZH397ezvz4nm9ievjcrvKygNgOpavqP0L5pVdpv39pcOWm9bCRd10dSTqRmeHB0iUXyq+\nM7nEVGenN68uWqkD9UDsqoxmtQvst82yuCul5gNKaz2Qs98BfEtrPZbc/jVwDlBU3EeqWPDB7+8h\nEJidQ314fLa7YzAYBiAejxMITDAxGcyLHzgykbW6UN7xwETBY5XEydyX+j09HU7uMQgEJgiGzXu7\nRKNx0zRjsfy5z3PDmcWbmAhm7R8fzy6XsbGZvHiR5Hz0kUisrDwARoan8veNTONzldd+HxmZIuAt\n/oJZ7vUJBCbS4h4MRYBE+aXix+OJsgwGw8Ry5pS3UgdqTW69bxbErsqpxrZCD4VqWu6XAI+b7O8F\nNiulTgWmgMuBO6rIp/YY1MVX0NQLDDWpj7nWrqwmPW1BqJpqxF0BO9MbSn0I6NZa36aUuh4YAELA\n41rr31Rnpo1YEAvDMIgbBq4KVoaOxw1iOWpejm8/K4iNyhOLV7a6UbRYeLNVmgwDw6Coe6vRVPSg\naN7TEISysCzuWusbc7bvzvi9GlhdhV11xSjRdP/yHc+zPzDFbf90GW4TH7cZV/97/sjXRn1Q3bF/\njK+vLt5x6dv3Za/ZetsDL3PeKYuzHmiFRqgCfOOuDWzfN8Yd111etb21o5lfnQTBXtpyEFNRETXR\n8FKiuz+Q8BsHw+WtgVqIiudgsan5+Mxm8yH2pQiFs1vvjpwRqpnW5Y5wLUqDnnLScBfmEm0p7kVp\nYOOtnImomqu7ZAlj6qCAds7kmLXCU3MVtCDYTluKe7NO7VqenjTLIqr50m7T1DLNdXUatSyUINSY\nthR30w9+xYLXSW2qm0K2eSTRSLtlSgtj1Q8CG0/btLVu43TLgtBMtKe4NyllzS2T8bvR+lLKXssC\n2KDnVPM8HgWh9rSluFd+E9fntq/U595srcfZRTZaVCYrWYFEEFqcthT3SqmXW6bVv+HZJe2VxLfV\nLVNRaBF9obVpS3Ev6l+vmxUmeVesVI0VmIL2pnzuLdZbpuWfroJQAdVOHNYW5N7y0Vi84GClQsci\n0TiuEqMzy9EWs7lizGxwOR15I2Arpdh5gsmDMOP0ogXsTO0vmq5hFIyfSyxj4rFicVLnUuycCpVW\nKk48WZ6GkT2iNxYzCIajuF1OHI7Edjgax+1yEI0ZdHpdxOMGXo+LcCSWvi6GYeBwOPC4nenrFUrO\nz9PpdeFwJD5JhyPx9OzOruScO/F4Iq5hGLjdTmKxxCjp1Hg7r9vJ5EwkGS6xKlXqYexyJs7FwEjb\nHI8bhCJxHA7S8yh5PU5cTifTwQidHW5C4RgdyXOJxuLE4ga+DjehSAyHw5FI00jEi0Tj6bRTo5NT\nRKJxpoNRXM7EuTudjrxr53I6CIZjOJ0OOjwuorE4kWgcj9tJMBzD63YSisQS8R0ODBJ2xw0DB4n6\nlSpLwzDwdSYmgpsJRdP1IGVnyp0YisTS5xWJxnE6SJ5v4nrnjrB2OR3ptFLn5XE70+XQ4XURicaJ\nxhL7o7FEGonyJl3WqWsajsSBxEh3h6P2o7nbUtx/u252KbYnXzwIwOR0YqIo0+LMqJiTMxH+4dan\nuOSsZXnB7nn8VZ7ZfIibPvUmFvTOzi4Zjxtc98M/sKS/q6hdpXzuDz77Gmue3JmxJz98MBzlU7c8\nyVELfRwcsj7Z2u5DE9z58Ct88K0n8fbzlpuGyTU3VXb7j0xxzY1rTeOk9r/7guP4wGUnmoaJxOIF\n4+fyzbs28Gcrj+FDbzu5YJxfPbWTB555jWvedxq3Pfgyl569jL975yl54cyK//DwNNfcuJaPv+80\nxpN15KlNB7PC3L92O/ev3V7S1r99h2L178zXpFnU18mRsezJ2Y5d3M2h4WnC0cqmhshkcX8X3V0e\ndh4YtxT/w28/mZ89ss1y/h1eF6Eig/uOWujjix9eyT/c+lTBMJedc3R62UOr+Od38s7zjytY/lZ5\n1/nH8vBze0yPnbFiAZt3DduSz8+++k5b0smkLd0ya184kLcv3ZoqEXfvYGLq2ydfzE8jNdJz+/7s\n0ZiRWGItz1f2jObFyaSUuGcLuzmpBb6rEXaAP74yCGQvOJ1HnrqX39L4TcYDNpeJpIiWy2Pr9xU9\n/kByvdO7Hk2I1BMm178UD68zv4Er4ZdrC5dlrrAD7BmcrErYAQZHZiwLO8AzL1kbvZyimLBDop4e\nOJI/M2gm1Qo7QGA0yP88Vfr+qZRCwg7YJuwAuw9Zv4aFaEtxr5Sq/bplRm81l29Tz2JpgVqPSm3W\nwXPFaKfOQu1WX6tFxJ0c0bUgAOXe1HaISz3rb669lnTAxOA20pMsWu3hDfW5Fu30AGklRNxtoNyb\nuhVv/kxa/SYtVv52nFtLXt46XFO7JsATKkPEvY602mRV1U2XkKCZxg3V3G3SWpcXqJPwirY3BBF3\ncmYLrDJ+MWzxCdbVL1PHvOpBzbW9BQtMtL1tmXvibkNr1JHX9CwvTTtawvUktx9H/nmXxvxtpTa3\neyn7Kpzmv3Ja6/ICdRJeUfeGUM0C2RuAVP+dXVrrj2Ycex/wZSAK3KG1vr0qK2tOdXdlubFbzS2T\n+yC07x618NG6BT5Gt9jVBer0QVXUvSFYEnelVCfg0FpfZnLMA/wHcB6JBbKfUUo9oLU+XI2hhUiN\npiuXSCz/FjQK/C4XKx9UU6Pdyg1v5PyvBLNRr5Fk/+pitoejcSLRGB63y0KuiTeVqFl5WziJsmbU\nzAhkOlLVMJIjFmvTba6SejiXqNc3lpZrPGVQC9OtttzPAnxKqUeSaVyvtV6XPHYqsF1rPQKglHoa\nuAS4t1pjzfjempeYCcf4wt+cUzLsd365iY2vHikeqIxCzq2rDz9XeMBOJvEMRbn2prW85Q1H0+VN\nXAIzETQ1z0ItyB1xCaSHbhfjyz9+HoCbP30R/T0dFTfz/m31etMBNlbq8fd/tblkmEy3zDU3rs1b\nz/W6H67LjZIR2YJRObSitrSgyUKZWBX3aeAm4EfAScDDSimltY4CvUDmEM4JoK9Ugv39PtwWWohH\nxkOMToTw+3tKhi0k7AsXdtPj8wLQNzxTMp3evq6s/Mod3djbmz09wcCG/Xzg8pMKhs8UK7fLid/f\nw2SkdOuwnLJI4XSUDj80FebkExbRmZy/o1wKjZzs6y0+TYMZG7YFSoZJzeGRopJy8HisvZ20OvU4\n7wX982qeB4DT2bqfEB1l3IeVYlXct5FonRvANqXUEHAUsJeEHz7Tyh6g+Lh8YGTE2nD6eCwxGU8g\nMGEpPsCRI5MEuxLCNTZWWtzHx2Ys5Tc6mn+O09PhguFz3QyBwATDw8WHcgMV2WaUEX58PEggMEEo\nGC073WKMjlU3dUIh4jm+lkrKIVrGQ7MdCYXtuabFMKv3taCV3TJQWX3NpNBDwaq4fww4E/iUUmoZ\nidZ66t1/K3CSUmoBMEnCJXOTxXxK47B7zu/aVZBK/bzNMmjIbjPqN39+a9/s9SA+N59pcwKr7zE/\nBuYn/en3kBD7v1ZKXaO1jgCfA34H/IFEb5nqZwYqQHKm1KqoVASsim6l+TSbNtn1sKnVeeV1UK0g\nn5bso24D9eie2yyNlLmGpZa71joMfChn97MZxx8EHqzCrgqwueleQ1rDShMcWf+qpl4t6koEu0Wq\nkO0YbTTblrypZdO6XyCSOBw2L/tWw/qR6xO2QiPqr8Nuda8TFbXc56gw1KPlPkeLtuG0vrhjQ+Wp\nOL41latbi7VG+dg1GKVmgpLz/l+ZW2ZuUo+Ge71GZrfRS4gttLy4J/SmNa5qy7ZgWqzFPou4ZUph\nx9tkyTzqVrhz9CIWoOWX2XPgIBSOJdZ5xOII0+T/UCRGqIIucaFIjI4K+gmbVfJirexIxio94Uis\nrIFHUHkZlGrpp+2wSeRLrd5jF+KWKc34VOGuuHYRK3OAXrXMhOpTr1qFlhf33YcTfUM/efMT1hMx\nDO5+bBuP/an4cm4pHA547uXD/PCBLXzi/aeXnY2ZuBdbxitzAezAaJBP3vwE73ij+Xqnmdw3UGTp\nPBO+de+mosd/8KvNxP/8dNsa8D95+BWbUsomV6gqE3ebjWkRpkO17+f+zbs21DwPIZ/Wd8vYRLnC\nnmJgQyJ8Jes/2iEgAxtK5/fb5ytbD/SlnUOl892439KskI2kkt4y9XBPCEI9EXHHmisnJXT1fvVv\npMA6W0vbK7o2rTYdsyCUQsQday3qlMZWIti26EeLCWyrEJOWu9BmiLhbwMFsC7qS0dut3jpsNesr\nefC2+rURhFxE3C3ibFDLXRru5VNJcYvPXWg3RNyx5gu34nO3o3XYyG+arda4rejaiLgLbYaIuxUc\nmeIuA2WaFXHLCHMZEXeLpFrQlTT4bOkt01DHTGsJYCXWygdVod0QcQcOD1e2mMDh4RkGRxKLegxW\nsMhIpfmYYbdbJnMUbDGCoSjTLTYCsJJnaXiOLtYhtC8tP0LVDm78+QsVhf/FwPb070qGPK994UBF\n+ZgxZdNqSJWyZ3CSPYOTDcnbKk9UMMBMENoNabkLbcujf9rbaBMEoWGIuAttS1T86MIcxpJbRinl\nAe4Ajgc6gK9prR/IOP5Z4GogtWT9tVprXZ2pglAZ9ZqNUBCaEas+9w8DQ1rrv00uhP0C8EDG8ZXA\nR7TW66s1UBCsIn3XhVahFj1xrYr7vcB9yd8OIPcr30rgi0qppcCvtdbfsJiPIFhG+q4LLUOziLvW\nehJAKdVDQuRvyAnyc+B7wDiwRin1Xq31Q8XS7O/34XaXv/CFIAhCu2Bg4Pf32Jqm5a6QSqnlwBrg\n+1rruzP2O4Bvaa3Hktu/Bs4Bior7SAX9xQVBENoJw4BAYMJS3EIPBasfVJcAjwB/r7V+POdwL7BZ\nKXUqMAVcTuLjqyAIgmBCLRyIVlvu1wP9wJeUUl9K7rsdmKe1vk0pdT0wAISAx7XWv6neVEEQhDal\niXzunwE+U+T4amC1VaMEQRDmEs4ajDhq20FMbzjZzxtPXZy1r7+ngw6Pi3NOWsTKk/0AHO2fx/xu\nL53e7I+5Ry30AeByOlip/LhdiUld3K7sInvn+cemfx/jn5f+/dY3HMOC3o6C9q04qpdli2bDp+aM\nWTy/i8984PVccfEKXnd0H8ctzfanXXb2Mhb2duDrcNPfM5t+pl1vP2953rkDnHh0L0ct9OFwJM47\nc56aTNtPXj6fM09YaGr3sYu7ed3Rfenti85cCsCivs78/Jb18oaT/Vxx8QoAVJF0UzhIlF0mToeD\nS85aRo/Pkxd+xVGz5fP6E2fTXtTXyaVnL8sK2zvPC8AbT12cdwxgcX9X+vdJx/Rx0jF96TgpXBlr\nDS5Z4OOC05ZkHe/r9nLRmUt5yxuONj0/X4ebP7/o+PT28sXdpuEyOfeUxaw82c+xi7s5xt+Ny+mg\n1+fhhGWz12HJAh+XnLWMz/31WSxdkKi7meXR4/Nw5btOweNO1JPurtmyPH3Fgqz8jvF3c8YJ2fsy\n6fC6+NQVZ2Rd89T9kYvH7cyrwym6OmbvuSX9Xbzz/GPpzbjG733TcQXnUjpqoY9r3ncaV1y8gr99\nhypoa+Z5pjhjxQJOPDpx/52wrDfr2LxOd7rc3njq4qz4733TcXk6AYl6k7r/ujrc6Thed3F5/X/e\nciILeztwOhycuqL4fWEFhx0zFdpBIDBhyZCPffP3APzbNRekK7VVUmkB3HHd5VWlBYkPHVY/ktQS\nsasyxK7KELsqpxrb/P4e00dg27bcBUEQ5jJtI+6y/JwgCMIsbSPugiAIwiwi7oIgCG1I+4i7+GUE\nQRDStI+4C4IgCGlE3AVBENqQthF3r8woKQiCkKblF8j+ypXnEZgIZY3WtMo/fvBsntp0MG/UoSAI\nQqvR8uJ+3NIezj1zmS0jz047fgGnHV942LUgCEKr0DZuGUEQBGEWEXdBEIQ2pGkmDhMEQRDsQ1ru\ngiAIbYiIuyAIQhsi4i4IgtCGiLgLgiC0ISLugiAIbYiIuyAIQhsi4i4IgtCGiLgLgiC0ISLugiAI\nbYiIuyAIQhsi4i4IgtCGiLgLgiC0ISLugiAIbYiIuyAIQhsi4i4IgtCGiLgLgiC0ISLugiAIbYiI\nuyAIQhsi4i4IgtCGuBttQIpAYMLyYq79/T5GRqbtNMcWxK7KELsqQ+yqjGa1C6qzze/vcZjtb4uW\nu9vtarQJpohdlSF2VYbYVRnNahfUxrayWu5KqfOBVVrry5RSrwPuBAxgM/BprXU8I6wT+D5wFhAC\nrtZab7fbcEEQBKEwJVvuSqkvAD8COpO7bgFu0FpfDDiA9+dEuQLo1FpfCFwH3GyfufYSi8d56sUD\nrHv5EIZhsHnXECMToawwh4an2b5vrOw0dx+aYO/gJADxuMGGbQGmg5Gy47/82jDrthzicMYr2uDo\nDHrPSNlpZLJ9/xjrXj6UtimTzTuHGJ0MmcSqLZFonPU6QCQayzs2HYywcVuAobEgL782TNzILsNU\n+cbiiTSC4WheGsFwlJ8//ioHh6bKsicUjrFeB4jG4qUDC0KLUE7LfQfwl8Dq5PZK4Ink74eBtwNr\nMsK/GfgtgNZ6nVLq3HIM6e/3VfVq4vf3VBznwad28pOHXwHA6Xbzn/dvotPr4t5vvDcd5mPf/H0i\n7M25zzBzMsM/tXE/373/Jc46aRFf+8RFJeOOT4W56ecvzNqXzDOV5pp/fx9uV2WetFTczPQAIg4H\nt/ziRXydbu75+nsqSrNaVj+8lV88to0/v+QEPv7+M7OO3fbQVjZtP5Le/sRfnMl/rnmJ179uEV//\n5EXp8/n4FWdw+682c+k5x/CPH16Zlcaqn/6Rp188wCN/3FvWdbv15xt57I97+Oh7T+Mv33KSaRgr\n9aseiF2V0ax2gf22lRR3rfUvlVLHZ+xyaK1THz8ngL6cKL1AZlM3ppRya63zm1gZVPOhw+/vIRCY\nqDjeK7tmReRFPQhAMBwzTavS9AOBCfYNJuK8+OqRsuIHRmeK5jk4OI6nigdgKj2/v4fX9ibeBKaD\nUUtlVw1bdiTKffP27HLx+3uyhB3gpVcDAGzKCbt151ByfyDP/k3JOFDeddu0PZBOM3DG0rzjVutX\nrRG7KqNZ7YLqbCv0ULDyQTXz3bUHGM05Pp7cn86jlLA3Aw7T781CLbCjqIulYbnblSC0EVbEfaNS\n6rLk73cBT+UcfwZ4N4BS6gLgJcvWCVkYbaZadpyP0W6FIgg2YaWf++eB25VSXmArcB+AUuqnwA0k\n/O9vU0o9S6KB9VGbbK0p0nCvI+nCti7Mxd60RO8FoUxx11q/BlyQ/L0NuNQkzEcyNj9hh3H1xNEE\nfpl6alIjBdDRbI9SeRgIbUhbDGJqWmx+YLSbBtniljFNt91KShAqR8Q9RZM1Jk1pE82y55nXChdM\nEBqHiHsLYbSLuiex5Wzaq0gEwTZE3JNYbQdufDXA2FSYDdsCjE+HbbUpl4ee3V1Tl8PGVwOM5YxY\njURj/PGVQcKR/NGk1bL70ER6FGk0FufpF/eXHbfc1v/W14azRvsKwlyhaWaFbEV27B/jO7+c7em5\ndIGvpvn9Zt1ujl/aw7mnLLY97V0Hx/nOL1+iv6eDmz89O5p2zZO7+O3ze3j7ecv54FvNR29Ww7/c\n/hx3XHc5Dz+3hzVP7qw4vrnPffb3jckRv3dcd7lFCwWhNZGWexIrfuBhk3loas1gzihWuxgeDwLk\nza3z2qHxxP+D47blZVbUew9XNjpPPO6CUBwR9xrSBL0rqybVRbRpXdsmbqp2+zYhCFYQcU/TBkpc\nQ+yUS7MxBSLHgmAvIu5JnCW0fa72nU7rcKNOv9B1KfJaZPlSyfNdaCNE3IUk5sqW1vYaP9ys6urc\nfOQKQmlE3FOUcJC3v4gUOMMafDiwI0mZFVIQiiPiLhSl0V6ZUsxRb5kglETEPUnJxqQFEWm0C9cW\nV4rDxrTsRJruglCUOSHugyPTbNox1FAb9J4R9gXy1zGtJXETQf7TK4PpPu2FeGX37HqtqRkc4wY8\n9/JhJmfM14PdtneUPRX2Va+Gl0yu50woyroth8paC7WUvXHDKHq+gtDszAlxv+6H6/jWvS8yVWyh\n6lK9ZapUDDZGAAAbC0lEQVRsDq66eyNf/vHzVaVRKU9vOpi1vWP/GN//1WY+960nCsRI8O//vTH9\nO+Uf331ogh8+sIVv37fJNM4379rA//7JH8uyy47plY+M5T+gfvo7zW0PvkwsXvpalbL3uS2H+eED\nW/je/bLWjNCazAlxTxGOFG7RNdqFAtjuQD44lD1iNjX6dMhEGMtl+/6x0oEaxA6Ltpk9uFPz0ei9\nuatICkJrMKfEvRilFpBoNpdzvajFQ8/ONDO/BczVayQIZliaOEwpdSVwZXKzEzgbWKq1Hk0e/yxw\nNZBahv5arbWuytJa0xRN9+ajJitUSVkLQs2xJO5a6zuBOwGUUt8D7kgJe5KVwEe01uurNbBe1ERv\nRMSqpp5L8mXm1AzLLgpCNVQ15a9S6lzgdK31p3MOrQS+qJRaCvxaa/2NUmn19/twu12WbfH7e0qG\nWbhwHgv7utLbnZ3e9G+fb/a3WVqLFvXgcWd7sXoPFJ4psZA9xeyMOrLTNws7b15HWecK0Nnlydru\nzTj3+fNnpyf2+3voOZjdcySVR0dHfhUpln85tnV2ZNvl9/fQkbMvHbbTkxUuF6fTkd7vchUW5GLX\nw+VKlHtHpycdbl5GfSgWv9GIXZXRrHaB/bZVO5/79cBXTfb/HPgeMA6sUUq9V2v9ULGERqpYUMHv\n7yEQKN0Nb2hoing4mt4OBmcX15iemf1tltaRIxO4XdniO16kS2Ehe4rZOZxTBmZhp6ZCZZ0rwMx0\ndu+g8bHZ6YJHR2fzCgQmso5l5h3OKK9idpVzLEUolG1XIDCRty9FMKOHk1na8biR3h+LFXa6F7se\nsWTXyVAwkg43nbPwSrllXk/Krff1RuyqnGpsK/RQsPxBVSk1H1Ba64Gc/Q7gW1rrI1rrMPBr4Byr\n+dSLdvygasfUt7XxuYvLQxBqTTUt90uAx0329wKblVKnAlPA5cAdVeQjNJBml+GaPXSb/cQFoQTV\ndIVUQHpdNKXUh5RS12itx0i4awaAp4AtWuvfVGdmeUzORHh280Fi8TjRWJxnNx8sPnApg9KNyYSK\nTEyH+elvX2HHgTE2vhooGuNAYKro8Q3bAjVbWQnIG4a//8isPet1cdsNw2DdlkOm68L+fsO+rJGb\nY1PZYUYmQjz38uGCaZsVdSGNtmtd2kqnTxBtF1odyy13rfWNOdt3Z/xeDayuwi5L/OBXm9m6e4RI\nNE40ZnDXo9t4/YkLbc3j1vs2sfPAOGtfOFAy7O//tLfgsSNjM3w3Ofoxtb5nrT0///P0rvTvR4vY\nBrB51zC3Pfiy6bGfPbKNP24d5J//1xsAuCljRCvA//mvPzI6Gaa/p4OTl8+vyubKpo0oXIIv7x7h\n9OMXmMdqQZebIJSirRbITo2eHByZSY9GLXfUYqmWe0oAdhbpIVMJ08H8D5V2U41mlZp/JnOkauYb\nAcDoZKK1nduiT2FW1rWez300Z21YQWh3ZIRqknr2pxZaAPnoK7Q4bSvudi+S3JJv7lUYbcf51mea\n4PLyqNQUkXah1WlbcU9Rdlc+uZvrhoz+FITa0/bibhst2HSv6u2lRc5XPoYKgjki7kmaoi05R4Sq\nkq6QjUJeLoRWp23F3W6xsNuHXw+qsbhVzrZcO1vx+glCNbStuFdME7TUmkl+avoxtAnKWhDanbbq\n514O+wKT/GJgO598/xlZ+50l3sO37BphYV9H2fk889JB0/1xw+APmw/R1+3NO2YmqJt3lR7E8/zW\nw6w4qhf//MSsjy9sP8Kivs6ynxY7Doyxdc9I1r6RMvuF567qtHHb7MjXV/aMsrC3kxOP7ssKk1vS\nxUazZjJYZHK5XQfHGRovbPMLrx5haCyIf34XSxfMzoh5yz0vZCzZl7BscibC0y8dSof58g+fZdlC\nH2esWMCquxMDtk46po8jY0E6PC7C0RgfuOxENu0YYnI6wt7BSQzDoL+3k/nzvLyYHIh10RlLWb64\nm+dfGWTngXEW9XVy8euPYioY5cUdQ5x3ymIeevY1LjpzKQt7O/nDlkM4HQ5OOa6fd51/LLfet4kT\nlvUyNBYkEouzY/84b379UXR53Tz6p72cecJC3vnG5Ty2fh9nn7SIpzcd5OhF8/B1eljS38X9T+1E\nLZ/P1EyEqWCU805ZzO7DE2zfP8ZZr1vE2GSYvYMTLF0wj7+69AS+cdcGQuEYi/oS1/AvLl7BDT9K\nLBVpGAZ93V7+4a9ez12PbmNBbydTMxE27xrm8/9rJT/6n5fo8rp59wXHseW1Yd77puMx4gZ/fGWQ\n9dsChMIxovE487s7OHBkin/6m3M4YVkvv3tuD4+t38dxS3o4fcUChseDPLZ+H2eduJDx6QhH++ex\nZdcwgyMzXP6Go1m+uJuJ6QgGcP6pi7n/yZ0MT4To7vTwwvYj/NWlJ3DGioXc8/tX+crHL+Tx9fvY\ndXCcE5b1ctnZR+N0zl7ztRv343I58LpdnHnCAl7YPsQpx87nvid24J/fxeL5XRgG7A9MsnXPCMPj\nIZwOBz0+D3/zZyfxxlOXMDgyze7Dk4xPhbnr0W30+Dyo5fMJReK8tDNRD845aRFvOuMotu8f5Q9b\nDnPCUb185ZoLy7oHKsHRLKvaBwITlg1Jzah27U1riUTjvOv8YwlGYgxs2E93lyc9VP7mT1/E57/3\nDACnHDufxf1dPPliQoTfc+Fx/PoPu4HZEaMAH/vm7y2fkxmfuuIMvv+rzVn7UvkdHJriX25/Lmt/\nbv4fuOxE3n3Bcent/YFJvvTj53E5Hdz+hbcQjcW55sa1ALzlnKMZ2LjfVvtTpPL71C1PEAzHiobN\nLE+A2x/cwh+2ZAv6kv4uDo9UPhVDh8fFDz5/qS3X6cLTl/Lx953GLfe8wOZdw1WnJ8yyqK/TdN3b\nTL5y5Xl89c7y1uG1gtftJBydXWrzynedwiVnLQOw5Zr/4POX8smbi69PXIhvfOoilvSW33jMxO/v\nMW2Zzim3TOaD7JU9jVkbc6jEyM9KST24UotCZy07Z2tO5pQSdnPy62LmXDWNxq5RyMIspYQdIBy1\nUpfKJ1PYAQIZ8zrZcc1TU0dbYXG/r3SgCmlfcW+OF5Ka0yQvXg1DPpS2D61el+NV2J9yD9lJ+4p7\nkrLHMDXBRz7bK3eT3i3NUNZC89EsLmKrVGN/Le6Jthf3TJqh7thtQ25ymek3wenWnjlxknODalq+\nzUA193YtRm3PKXEvTuObk/bM52JDIjWm8SUtNCPScreXthV3s2KeC/7ZuXCOmcyts21vWv1aVmN/\nqa7YltK0PcUmo9wia4rWpA0tlyy3TLPeLU1R2EKz0fotd+txa+GWsTyISSm1AUj1H9qltf5oxrH3\nAV8GosAdWuvbq7LSLooUfjN85Gvtql0+ZnPny0yRQotre1UPpxp0lrEm7kqpTsChtb7M5JgH+A/g\nPBILZD+jlHpAa13eMMQqiESL9zMtVvTjJqsGvbrP/r7w5Y78hMSgplyC4ShrX9jPhactpcPryrsj\nsvvytvjdUgaRaLzgik+VoveOcOu9LxKtor+yYJ1Gtdyf3XyQ6VD1K6PFq/K5N0/L/SzAp5R6JJnG\n9VrrdcljpwLbtdYjAEqpp4FLgHuLJdjf78Ptdlk0BwzXbFyfzwvOxMVyOmc9TwsWzMuK09k5OwVA\n5pqofn8PYP/oVDBfuzSV31Q0u3JkjlZN8dCziVG0o1MRPn7FmRwYnR0cYrhdPLFpdtqDzPOrBSm7\nKw3X1eXJC1NNP9/vrnnJctxMhsdDDBeZwkCoLT29XXXNz+fzMhaM8aOHttqSXn//vNKBCuBwlH8/\nlYtVcZ8GbgJ+BJwEPKyUUlrrKNALZC5cOgH05SeRzUiReUNK4ff3sP/QbJbT02Fmkk/ieHy2FTY0\nnN0SDgbNW3yBwIRlW6yQym9kOL+lXogd+0YJBCYYG50ttwMHx9iZ8bYxM2NPi7YQ5ZZTbriZYP5o\n1HgV/eB27CtvnVyhuRkdta4BVpieDrN7v31v50NDk5bjOh0Oy7pT6KFgVdy3kWidG8A2pdQQcBSw\nl4QfPjO3HqDmY/0Lfm3O3N/kTj07rKvm1bBeiHddMKMxVde+TKv6oFoDp7tVcf8YcCbwKaXUMhKt\n9ZQ/YCtwklJqATBJwiVzU7WGlqIWw3dbgbz6NNcGMQltQyN87nYOnKqmYVUL+bLaFfLHwPykP/0e\nEmL/10qpa7TWEeBzwO+AP5DoLVObqQkzKKdwml3s7KjczX6OYN4zSTrLCA1puduYZ1t0hdRah4EP\n5ex+NuP4g8CDVdhVMbluGdNybgXlqwKDnAdEDc+3Bbw/QovRCJeinYP+qhuhKoOYCiL9pBO0hujK\ntRLymcst92ZyyzQduU/gVliEORcrlSMzSu4513IqgmqepfIcFsxohM/dzhybrZ9724h7OVep1Yc3\nl0OrnqPovdCIqmvn/dJst17Lr6G6be8oe4ameXn7kfS+h5/bk/6dOWr1hYwwAM+9PFgw3XUvHyp4\nrBZMzkT4/YZ9ZYffUmBJsKwK1mSVDWDP4QnW60DpgMKc4/aHXq5rfnsHJ9mx374xErVcItAKLS/u\ndz+6jclgpODIwpmMYcX3DuzIOhaKFF7W67YH6lvRfvKbrWx89UjpgBnsHZzME/Am1HN27B9LL5L9\nv3/SXDeAMHfZtKP04vOtTMu7ZWJxg5CldTybi32Byke3zeTMh2FAVtO9WYR+YrqM9VHFES8IttLy\n4o5jdnHoVsbKB5W8KAY045RX5fg1RdoFwV5aXtwdVDcvSbNgTdyz48QNI3uEapMUSxtcHkFoOVpf\n3B2OlphPpRRW+rk6HNndHRPa3nxlUVaPBGm6C4KttL640x5uGSs4cOTMJWPktNabo1zKsUK0XRDs\npeXFHYf97odG9BW3soaiw5Ht8jCM5nHFZFKO26wJzRaElqblxd1sybZqaYSbx4rPPfFAmLU1YXfz\nyWRZD8vmM1sQWprWF/cavM834gOtVZ97sZZ7s+hlOXY0i62C0C60/CCmkUn7l0W79qYnbE+zGFaX\n87v1vk2876Lj09v/tnp91vF1W2q3bG0sbjBtsqKSGat/pxnYsD+x5mshmtGfJAgtTMuL+9hkbZeS\na2ZGJkKs3VjzqfIL8rNHtpUVLhiOsb3EMG+RdkGwl5Z3y8x1wpHGDVs6cKT8NV9LIQ13QbAXEfcW\np1VngRQEobZYcssopTzAHcDxQAfwNa31AxnHPwtcDaSm/7tWa62rM1Uwo136+MtDShDsxarP/cPA\nkNb6b5MLYb8APJBxfCXwEa31etPYgm20i7gLgmAvVsX9XuC+5G8HEM05vhL4olJqKfBrrfU3SiXY\n3+/D7S7Sm0IwpZFTL7g9Nl4vmRVSmOP4/T22pmd1gexJAKVUDwmRvyEnyM+B7wHjwBql1Hu11g8V\nS3NkZNqKKXOeSAM/qEaKzIdfKe0w+ZsgVEMgMGEpXqGHguUPqkqp5cAAsFprfXfGfgfwLa31Ea11\nGPg1cI7VfITiROONE3d7BVnEXRDsxOoH1SXAI8Dfa60fzzncC2xWSp0KTAGXk/j4KtSAWKxxomin\nv1++pwqCvVj1uV8P9ANfUkp9KbnvdmCe1vo2pdT1JFr1IeBxrfVvqjdVMKORH1QPDdvnSgu2wWpa\ngtBMWPW5fwb4TJHjq4HVVo0SBEGYKxzj765Jui0//UAKl9OR14r90t+dy7KF89h9eIJv3rUBgO/+\n/xezLzBFd5eHYDhGKBLjp7/THB6epsPr4gt/cw4dHhcul4NQOEYsnpgj3eN2MhOK4nQ4CEdjdHW4\ncTkdhKNxIpEYHV43TmdipsZY3CASjbPi2H4GA5OMToTo8XnwelyMJefCmdfpIRSNYcTB63ESjsbp\n9LiYmIng63ATicXp9Lro9XkxDINQJMZMKEYkFk/7unt8Hv7l9ucAeOsbjuFt5x3D0HiIRX2dTM5E\nmApGcDocOB0OFvd3MR2MMh2KsuLYfgKBSUKRGBPTYbo63Dhw0NWZOKdgOEo0ZuBxOYnE4izp7+LQ\n8DT9PR1MTEdY0NvJ4eFpvB4nDhx0d3mIxePMhGJE43E8LifBcIzF/V1MzkRwuxJl1+vzEo7GcLuc\n+DrdHB6eIRaP43Y5cTigy9cBsRhup5Oh8SDRWJwFvZ1EonEMw8DpdBCLGUyHorhdDnp9Xrp9HvYN\nTtLV4aYzOXfN6GSYvm4v8bjBTCjGvE43Y1NhenyexL5wDK/bSY/Py8hEiHjcIG4YeNxOItE4HreT\nqWAEf18XTqeDRYu6OXBwLHlN3BwZm6HT46Znnof53R1s3T3Cgp4OguEYLleivH0dbqaCUZxO6PK6\nmZiJEI8b9M3zEo7GicbiLF3gY3wqTCQaZyoYYVFfF5FYnJHxIF6Piw6vi9HJEMv93QxPhNLlunxJ\nN6MTIQy3i1goQigSJxSOMq/LQziSqDcGiQ5InR4XccNgcibRoS0SjeH1uFjQ28mR0RmcTgcup4NO\nr4sOr5tDQ1N4PS5C4RgOB3R4XRy1cB6Hh6fT13JxfxfhSAzDgOnkdR2bChOKxOj1eVjs7+HI0CSB\n0SBLF/ro7vSw6+A4BgZup5OuDjcdXhdul4OJ6UjaJReLx5nf3cHIRAivx0l/dweHR2bo8Xno8LgI\nRRL3Yzxu4HI56XA7GZ4IEYnGWdTXmbg+Hhdut5PRyRDjU2Hmd3cwMRNhYW8n87o7GR6eosPrYmI6\nTN88LxPTEXrmeZmcjhAMR+nwuAhGYsyf56V3npfJmQjjU2FmwjF8HQm57Ehem3md7mTdgfGpMFPB\nCD0+LzOhKB63k+lglEg08U1scX8XM6Eovk43wxMh3E4H87s7iMbiLFngq4kmto24n7x8Plt3jzCv\nM3FTAaw4qheA5Ytnn4y+Tg8nL5+fFXdJfxeHh6dZusCXjmMH/kXdeAyDoxfNS+9bavOFzDzfxf0+\nFvcn0vfP78oLu6A3265K6PF5AVjUl0i3b563rHjzuzsKHjthmSdr2+/vSfcYWNjXWbZt6tj+rO1U\nGWRS6Abq7ylsX9qufh+O6KzbKPcanv26RSXTWFJgf1dH/i2YmX6qVdeXU45LFviyyqsUi/vz95ld\nw0LX9dglxbvpZV4vv78bDwZHLZyt96evWGAaL1WfMsmsu7nnnRffpJ6Deb3z+3vo8Sb6kKTKOFUu\niwuk0+PzZp1HIcqpRynKSc8O2mb6AVdyzlwzF7SzxHy6qYUyWnGUZGoe+Lj0NhEEIYO2EXdnWtzz\nRc5VQtxT42daUNvT88Ab0k9cEIQM2kfcU61vE5Er1XJ3tEPLvfVMFwShhrSNuLuKtNxLrU/ayi33\nlO2NnIZAEITmo23E3ZESdwsDNlPS34oCmXoracW3DkEQakfbiHva92xB5GbdMnZaVB9SC4S3ou2C\nINSOthH3lFvGisal3TL2mVM3nMkrKC13QRAyaXlxP2FZovP2m844CoC3n7e84ELMHQWmqD3vlMUA\nXHrWshpYWFvecs4xALzh5MUNtkQQhGbC0SwtvkBgwpIhsXiceT1dBKdCjE+H6enyEI3FicaMrAEi\nM8lRjZ4Cc8aPT4fp9ZU3MKdcKhlkUg2V2l4vuypF7KoMsasymtUuqM42v7/HtMdIy7fcXU5nevRk\nr8+Lw5EQ8NyRf10d7oLCnorbqrSy7YIg1IaWF3dBEAQhHxF3QRCENqRpfO6CIAiCfUjLXRAEoQ0R\ncRcEQWhDRNwFQRDaEBF3QRCENkTEXRAEoQ0RcRcEQWhDRNwFQRDakJZeIFsp5QS+D5wFhICrtdbb\n65i/B7gDOB7oAL4G7AUeAl5NBvuB1voepdTHgWuBKPA1rfVDNbZtAzCe3NwFfB24k8Tkl5uBT2ut\n4/W0Syl1JXBlcrMTOBu4kAaWl1LqfGCV1voypdTrKLOMlFJdwM+AxcAE8Hda60CN7Dob+A4QI1HP\nP6K1PqyUuhV4czJ/gPcD4TradQ5lXrs6l9fPgaXJQ8cD67TWH6x3eRXQh5epUx1r9Zb7FUCn1vpC\n4Drg5jrn/2FgSGt9MfBO4LvASuAWrfVlyb97lFJLgX8ALgLeAXxDKVX+cukVopTqBBwZNnwUuAW4\nIWmrA3h/ve3SWt+ZsglYn8y7YeWllPoC8CMSDxqorIw+CbyUDPtT4IYa2nUr8P8ly+1+4J+T+1cC\n78gou7E621XJtaubXVrrDybL6i+AUeCzGfbWrbww14e61bFWF/c3A78F0FqvA86tc/73Al9K/naQ\neOquBN6jlHpSKfVjpVQP8EbgGa11KFmhtgOvr6FdZwE+pdQjSqnfK6UuSNr1RPL4w8CfNcAuAJRS\n5wKna61vo7HltQP4y4ztSsooXfcywtbKrg9qrV9I/nYDweRb60nAbUqpZ5RSH0ser6ddlVy7etqV\n4qvAd7TWBxtUXoX0oS51rNXFvRcYy9iOKaXq5mrSWk9qrSeSlfo+Ek/W54F/0lpfAuwEvmJi5wTQ\nV0PTpoGbSLQCPgHcRaIln5prIpV/ve1KcT2JGw8aWF5a618CkYxdlZRR5n5b7cu1S2t9EEAp9Sbg\n74H/AOaRcNV8mESr8FNKqdfX0y4qu3b1tAul1GLgrSRcINCY8jLTh7rVsVYX93GgJ2PbqbWO1tMA\npdRyYABYrbW+G1ijtV6fPLwGOMfEzh4Sr4u1YhvwM621obXeBgwBS0zyr7ddKKXmA0prPZDc1Qzl\nlSJzBd5SZZS5vx7l9v8C/wm8J+l3nQZu1VpPa60ngN+TeGOrp12VXLu6lhfwAeBurXUsud2Q8jLR\nh7rVsVYX92eAdwMkXQ8v1TNzpdQS4BHgn7XWdyR3/04p9cbk77eS8C0/D1yslOpUSvUBp5L4mFIr\nPkby+4NSahmJFsAjSqnLksffBTzVALsALgEez9huhvJKsbGCMkrXvYywNUEp9WESLfbLtNY7k7tP\nBp5RSrmSH+7eDGyop11Udu3qaRckXBgPZ2zXvbwK6EPd6lhL95Yh0Vp4m1LqWRI+rY/WOf/rgX7g\nS0qplG/tc8B/KKUiwCHgGq31uFLq2yQujhP4F611sIZ2/Ri4Uyn1NImv8h8DjgC3K6W8wFbgPq11\nrM52ASgSr/ApPgl8p8HlleLzlFlGSqkfAP+VLOMw8KFaGKSUcgHfBvYA9yulAJ7QWn9FKbUaWEfC\nJfFTrfUWpdSuetiVpOxrV6/yyiCrnmmttzagvMz04TPAt+tRx2TKX0EQhDak1d0ygiAIggki7oIg\nCG2IiLsgCEIbIuIuCILQhoi4C4IgtCEi7oIgCG2IiLsgCEIb8n8BbIhKb8BltbYAAAAASUVORK5C\nYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1224707b8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sizes1, sizes2 = trace.get_sampler_stats('depth', combine=False)\n",
    "fig, (ax1, ax2) = plt.subplots(2, 1, sharex=True, sharey=True)\n",
    "ax1.plot(sizes1)\n",
    "ax2.plot(sizes2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x122897240>"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x12249b400>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "accept = trace.get_sampler_stats('mean_tree_accept', burn=1000)\n",
    "sb.distplot(accept, kde=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.82722919848786325"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "accept.mean()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": true,
    "editable": true
   },
   "source": [
    "Find the index of all diverging transitions:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([], dtype=int64),)"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "trace['diverging'].nonzero()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": true,
    "editable": true
   },
   "source": [
    "It is often useful to compare the overall distribution of the\n",
    "energy levels with the change of energy between successive samples.\n",
    "Ideally, they should be very similar:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x122d5fda0>"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\nAABJRU5ErkJggg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x122bdb390>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "energy = trace['energy']\n",
    "energy_diff = np.diff(energy)\n",
    "sb.distplot(energy - energy.mean(), label='energy')\n",
    "sb.distplot(energy_diff, label='energy diff')\n",
    "plt.legend()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": true,
    "editable": true
   },
   "source": [
    "If the overall distribution of energy levels has longer tails, the efficiency of the sampler will deteriorate quickly. This plot can also directly be created using `pm.energyplot(trace)`."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": true,
    "editable": true
   },
   "source": [
    "# Multiple samplers\n",
    "\n",
    "If multiple samplers are used for the same model (e.g. for continuous and discrete variables), the exported values are merged or stacked along a new axis."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [],
   "source": [
    "model = pm.Model()\n",
    "with model:\n",
    "    mu1 = pm.Bernoulli(\"mu1\", p=0.8)\n",
    "    mu2 = pm.Normal(\"mu2\", mu=0, sd=1, shape=10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 10000/10000 [00:08<00:00, 1132.74it/s]\n"
     ]
    }
   ],
   "source": [
    "with model:\n",
    "    step1 = pm.BinaryMetropolis([mu1])\n",
    "    step2 = pm.Metropolis([mu2])\n",
    "    trace = pm.sample(10000, init=None, step=[step1, step2], njobs=2, tune=1000)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'accept', 'p_jump', 'tune'}"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "trace.stat_names"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": true,
    "editable": true
   },
   "source": [
    "Both samplers export `accept`, so we get one acceptance probability for each sampler:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[  2.50000000e-01,   5.82658453e-04],\n",
       "       [  2.50000000e-01,   1.13308087e-01],\n",
       "       [  2.50000000e-01,   1.63830665e-03],\n",
       "       ..., \n",
       "       [  1.00000000e+00,   1.14103585e-01],\n",
       "       [  1.00000000e+00,   1.23165436e-01],\n",
       "       [  2.50000000e-01,   1.69118059e+00]])"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "trace.get_sampler_stats('accept')"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
