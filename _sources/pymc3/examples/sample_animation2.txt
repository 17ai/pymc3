{
 "metadata": {
  "name": ""
 },
 "nbformat": 3,
 "nbformat_minor": 0,
 "worksheets": [
  {
   "cells": [
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "%pylab --no-import-all inline\n",
      "import pymc3 as pm\n",
      "import numpy as np\n",
      "from JSAnimation import IPython_display\n",
      "from matplotlib import animation\n",
      "\n",
      "import matplotlib.pyplot as plt"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Populating the interactive namespace from numpy and matplotlib\n"
       ]
      }
     ],
     "prompt_number": 1
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "np.random.seed(124)\n",
      "size = 50\n",
      "true_intercept = 1\n",
      "true_slope = 2\n",
      "\n",
      "x = np.linspace(0, 1, size)\n",
      "y = true_intercept + x*true_slope + np.random.normal(scale=.5, size=size)\n",
      "\n",
      "data = dict(x=x, y=y)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 6
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "samples = 300\n",
      "figsize(6, 6)\n",
      "fig = plt.figure()\n",
      "i_width = (true_intercept-.7, true_intercept+.7)\n",
      "s_width = (true_slope-.7, true_slope+.7)\n",
      "samples_width = (0, samples)\n",
      "ax1 = fig.add_subplot(221, xlim=i_width, ylim=samples_width)\n",
      "ax2 = fig.add_subplot(224, xlim=samples_width, ylim=s_width)\n",
      "ax3 = fig.add_subplot(223, xlim=i_width, ylim=s_width,\n",
      "                      xlabel='intercept',\n",
      "                      ylabel='slope')\n",
      "fig.subplots_adjust(wspace=0.0, hspace=0.0)\n",
      "line1, = ax1.plot([], [], lw=1)\n",
      "line2, = ax2.plot([], [], lw=1)\n",
      "line3, = ax3.plot([], [], 'o', lw=2, alpha=.1)\n",
      "line4, = ax3.plot([], [], lw=1, alpha=.3)\n",
      "line5, = ax3.plot([], [], 'k', lw=1)\n",
      "line6, = ax3.plot([], [], 'k', lw=1)\n",
      "ax1.set_xticklabels([])\n",
      "ax2.set_yticklabels([])\n",
      "#path = plt.scatter([], [])\n",
      "lines = [line1, line2, line3, line4, line5, line6]\n",
      "\n",
      "def init():\n",
      "    for line in lines:\n",
      "        line.set_data([], [])\n",
      "    return lines\n",
      "\n",
      "def animate(i):\n",
      "    with model:\n",
      "        if i == samples * .75:\n",
      "            for j in range(500): iter_sample.next() \n",
      "        trace = iter_sample.next()\n",
      "    line1.set_data(trace['Intercept'][::-1], range(len(trace['Intercept'])))\n",
      "    line2.set_data(range(len(trace['x'])), trace['x'][::-1])\n",
      "    line3.set_data(trace['Intercept'], trace['x'])\n",
      "    line4.set_data(trace['Intercept'], trace['x'])\n",
      "    intercept = trace['Intercept'][-1]\n",
      "    x = trace['x'][-1]\n",
      "    line5.set_data([intercept, intercept], [x, s_width[1]])\n",
      "    line6.set_data([intercept, i_width[1]], [x, x])\n",
      "    return lines"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "display_data",
       "png": "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\n1e63sn700Ud66qmn9O6772rw4MEaPny43njjDcXExPRQiXzzJYIXcxPBrEe+srupqUktLS0aOHBg\nlwbqDh6ACFbMTQSzgH5ld319vf76r/9aX/va1/TAAw/ob/7mb/Txxx+323FlZaUyMjI0evRoJSYm\nav369W22+/a3v63Y2FilpKSotLS083sAAPC7dsNh9uzZGjZsmLZv36633npLQ4cO1RNPPNFux6Gh\noVq3bp3ef/99HT58WD/5yU/0wQcftGqza9cunT59WqdOndIrr7yipUuXdn1PAAB+02441NbW6gc/\n+IGGDx+ue++9V9///vdVV1fXbscRERFyu92SpLCwMMXHx6umpqZVm507dyo3N1eSlJ6eroaGhg71\nDQAIrHbDYdq0aXrzzTfV0tKilpYWbd26VdOmTevUIBUVFSotLW31llhJqq6uVnR0tO93l8ulqqqq\nTvUNAPC/dsPhlVde0ZNPPqlbb71Vt956q3JycvTKK69o4MCBuvPOO9sdoLGxUdnZ2SooKFBYWJi1\n/cuLJQ6HoxPlAwACIaS9Bo2NjV3uvLm5WVlZWZo7d65mzpxpbY+KilJlZaXv96qqKkVFRbXZV15e\nnu+yx+ORx+Ppcl1AV3m9Xnm93lbXMTcRLNqan13VobeyFhYW6p133pHD4dADDzygzMzMdjs2xig3\nN1fh4eFat25dm2127dqll156Sbt27dLhw4e1bNkyHT582C6StwsiSDE3EcwC+jmHFStWqKSkRE8+\n+aSMMfrlL3+pMWPGaM2aNTft+ODBg5o0aZKSk5N9LxWtXr1aZ8+elSQtWbJEkvTMM8+oqKhId9xx\nh1577TXdd999ft1BIJCYmwhmAQ2HpKQklZWV6ZZbbpEkXb9+XW63WydOnOjSgF3BAxDBirmJYBbQ\nD8E5HA41NDT4fm9oaGDRGAD6uXYXpFeuXKn77rvPt8i2f/9+5efnB7ouAEAv6tCCdE1NjUpKSuRw\nODR27FhFRET0RG0+HLojWDE3EcwCsuZw5MiRVi8ffdHsi+vaWjgOFB6ACFbMTQSzgISDx+O56drC\nvn37ujRgV/AARLBibiKYBfTdStu2bdP06dN155136sUXX1Rpaam+//3vKy0trUsDdgUPQAQr5iaC\nWUDfrfTDH/5Qd955pw4ePKj//u//1sKFC/Wtb32rS4MBAPqGdsPhi883/Od//qcWL16sRx55RFev\n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\njR4VFhZmjDFm3759ZtCgQaa6utq0tLSY8ePHm0OHDhljWp8M5vz582bSpEnm8uXLxpjPT/Tx4osv\n+tr96Ec/MsYY87//+78mOjraVFRUGGOM7+P1K1euNJs3b/ZdN2rUKNPU1GRee+01ExkZaS5cuGCu\nXLliEhMTzW9/+1tTUVHRoe8/AtD39MlvZf0qGjt2rO655x5JktvtVkVFhe6///5WbQ4fPqzy8nLf\n9VevXm3V5oknnvC1e+CBB/Rnf/ZnkqS77rpL0udHHf/xH/+hH//4x5Kkzz77TGfPnpXD4dC0adN8\n36z6+OOP6+DBg75vnQTQ/xAOfcSf/Mmf+C7fcsstunbtWpvtpk6dqi1btrS57Y477pAk33kQ2rJ9\n+3bra8d/85vftPrdGOOXNQsAwYtHeB83cOBA3+lE09PTdejQIX300UeSPl9DaOsEROnp6XrnnXdU\nUVEh6fMTkkvSgw8+6DspuiSVlpZK+jwMfvWrX+nixYu6cuWKCgsLNWHCBIWFhfn1BEQAggfhEMT+\n+CxNNzpj01NPPaXp06dr8uTJGjp0qDZt2qScnBylpKTo/vvv14cffmjdZujQoXrllVf0+OOPy+12\nKycnR5L0gx/8QM3NzUpOTlZiYqJWrVrlG3vs2LHKyspSSkqKsrOzdd999yk8PFwTJkxQUlISC9JA\nP8NbWdGuTZs26ciRI9qwYUNvlwKgh3DkgHYF8jzFAIITRw4AAAtHDgAAC+EAALAQDgAAC+EAALAQ\nDgAAC+EAALD8P4I7StWNIxQzAAAAAElFTkSuQmCC\n",
       "text": [
        "<matplotlib.figure.Figure at 0x1053456c>"
       ]
      }
     ],
     "prompt_number": 8
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "with pm.Model() as model:\n",
      "    pm.glm.glm('y ~ x', data)\n",
      "    step = pm.NUTS()\n",
      "    iter_sample = pm.iter_sample(samples+1000, step)\n",
      "\n",
      "anim = animation.FuncAnimation(fig, animate, init_func=init,\n",
      "                        frames=samples, interval=20, blit=True)\n",
      "anim.save('animation_stan.avi', writer=animation.MencoderFileWriter())"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": "*"
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "from IPython.display import HTML\n",
      "\n",
      "def display_animation(anim):\n",
      "    plt.close(anim._fig)\n",
      "    return HTML(anim_to_html(anim))\n",
      "from tempfile import NamedTemporaryFile\n",
      "\n",
      "VIDEO_TAG = \"\"\"<video controls>\n",
      " <source src=\"data:video/x-m4v;base64,{0}\" type=\"video/mp4\">\n",
      " Your browser does not support the video tag.\n",
      "</video>\"\"\"\n",
      "\n",
      "def anim_to_html(anim):\n",
      "    if not hasattr(anim, '_encoded_video'):\n",
      "        with NamedTemporaryFile(suffix='.mp4') as f:\n",
      "            anim.save(f.name, fps=20, extra_args=['-vcodec', 'libx264'])\n",
      "            video = open(f.name, \"rb\").read()\n",
      "        anim._encoded_video = video.encode(\"base64\")\n",
      "    \n",
      "    return VIDEO_TAG.format(anim._encoded_video)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 23
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "display_animation(anim)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "ename": "StopIteration",
       "evalue": "",
       "output_type": "pyerr",
       "traceback": [
        "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m\n\u001b[1;31mStopIteration\u001b[0m                             Traceback (most recent call last)",
        "\u001b[1;32m<ipython-input-24-d232265f1ecb>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m()\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[0mdisplay_animation\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0manim\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
        "\u001b[1;32m<ipython-input-23-7070f1fc822c>\u001b[0m in \u001b[0;36mdisplay_animation\u001b[1;34m(anim)\u001b[0m\n\u001b[0;32m      3\u001b[0m \u001b[1;32mdef\u001b[0m \u001b[0mdisplay_animation\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0manim\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      4\u001b[0m     \u001b[0mplt\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mclose\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0manim\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_fig\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 5\u001b[1;33m     \u001b[1;32mreturn\u001b[0m \u001b[0mHTML\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0manim_to_html\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0manim\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      6\u001b[0m \u001b[1;32mfrom\u001b[0m \u001b[0mtempfile\u001b[0m \u001b[1;32mimport\u001b[0m \u001b[0mNamedTemporaryFile\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      7\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
        "\u001b[1;32m<ipython-input-23-7070f1fc822c>\u001b[0m in \u001b[0;36manim_to_html\u001b[1;34m(anim)\u001b[0m\n\u001b[0;32m     14\u001b[0m     \u001b[1;32mif\u001b[0m \u001b[1;32mnot\u001b[0m \u001b[0mhasattr\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0manim\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m'_encoded_video'\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     15\u001b[0m         \u001b[1;32mwith\u001b[0m \u001b[0mNamedTemporaryFile\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0msuffix\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;34m'.mp4'\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;32mas\u001b[0m \u001b[0mf\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 16\u001b[1;33m             \u001b[0manim\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0msave\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mf\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mname\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mfps\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;36m20\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mextra_args\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m'-vcodec'\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m'libx264'\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     17\u001b[0m             \u001b[0mvideo\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mopen\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mf\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mname\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m\"rb\"\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mread\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     18\u001b[0m         \u001b[0manim\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_encoded_video\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mvideo\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mencode\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m\"base64\"\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
        "\u001b[1;32m/home/wiecki/envs/pymc3/local/lib/python2.7/site-packages/matplotlib/animation.py\u001b[0m in \u001b[0;36msave\u001b[1;34m(self, filename, writer, fps, dpi, codec, bitrate, extra_args, metadata, extra_anim, savefig_kwargs)\u001b[0m\n\u001b[0;32m    715\u001b[0m                 \u001b[1;32mfor\u001b[0m \u001b[0manim\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0md\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mzip\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mall_anim\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mdata\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    716\u001b[0m                     \u001b[1;31m#TODO: Need to see if turning off blit is really necessary\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 717\u001b[1;33m                     \u001b[0manim\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_draw_next_frame\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0md\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mblit\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mFalse\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    718\u001b[0m                 \u001b[0mwriter\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mgrab_frame\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m**\u001b[0m\u001b[0msavefig_kwargs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    719\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
        "\u001b[1;32m/home/wiecki/envs/pymc3/local/lib/python2.7/site-packages/matplotlib/animation.py\u001b[0m in \u001b[0;36m_draw_next_frame\u001b[1;34m(self, framedata, blit)\u001b[0m\n\u001b[0;32m    752\u001b[0m         \u001b[1;31m# post- draw, as well as the drawing of the frame itself.\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    753\u001b[0m         \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_pre_draw\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mframedata\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mblit\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 754\u001b[1;33m         \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_draw_frame\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mframedata\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    755\u001b[0m         \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_post_draw\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mframedata\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mblit\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    756\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
        "\u001b[1;32m/home/wiecki/envs/pymc3/local/lib/python2.7/site-packages/matplotlib/animation.py\u001b[0m in \u001b[0;36m_draw_frame\u001b[1;34m(self, framedata)\u001b[0m\n\u001b[0;32m   1047\u001b[0m         \u001b[1;31m# Call the func with framedata and args. If blitting is desired,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1048\u001b[0m         \u001b[1;31m# func needs to return a sequence of any artists that were modified.\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 1049\u001b[1;33m         \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_drawn_artists\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_func\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mframedata\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m*\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_args\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
        "\u001b[1;32m<ipython-input-8-7107ae1aa561>\u001b[0m in \u001b[0;36manimate\u001b[1;34m(i)\u001b[0m\n\u001b[0;32m     30\u001b[0m     \u001b[1;32mwith\u001b[0m \u001b[0mmodel\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     31\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[0mi\u001b[0m \u001b[1;33m==\u001b[0m \u001b[0msamples\u001b[0m \u001b[1;33m*\u001b[0m \u001b[1;36m.75\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 32\u001b[1;33m             \u001b[1;32mfor\u001b[0m \u001b[0mj\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;36m500\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m \u001b[0miter_sample\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mnext\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     33\u001b[0m         \u001b[0mtrace\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0miter_sample\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mnext\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     34\u001b[0m     \u001b[0mline1\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mset_data\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mtrace\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m'Intercept'\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m-\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mrange\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mtrace\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m'Intercept'\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
        "\u001b[1;31mStopIteration\u001b[0m: "
       ]
      }
     ],
     "prompt_number": 24
    }
   ],
   "metadata": {}
  }
 ]
}