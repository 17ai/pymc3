{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "'TransformedRV' object has no attribute 'k'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-5-df7bbeedb488>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m()\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[0mp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mk\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;31mAttributeError\u001b[0m: 'TransformedRV' object has no attribute 'k'"
     ]
    }
   ],
   "source": [
    "p.k"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 0.1,  0.1,  0.1,  0.1,  0.1,  0.1,  0.1,  0.1,  0.1,  0.1],\n",
       "       [ 0.1,  0.1,  0.1,  0.1,  0.1,  0.1,  0.1,  0.1,  0.1,  0.1]])"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "alpha"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Automatic pdb calling has been turned ON\n"
     ]
    }
   ],
   "source": [
    "%pdb"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Applied stickbreaking-transform to p and added transformed p_stickbreaking_ to model.\n",
      "Applied interval-transform to sd and added transformed sd_interval_ to model.\n",
      " [-----------------100%-----------------] 100 of 100 complete in 0.4 sec[[  1.73796225e-02   1.53724316e-01]\n",
      " [  3.04023963e-03   3.24169141e-01]\n",
      " [  8.96259817e-06   4.75269935e-03]\n",
      " [  3.46520247e-06   7.17093255e-02]\n",
      " [  2.96706921e-02   3.11162325e-01]\n",
      " [  8.81311729e-01   1.33705558e-01]\n",
      " [  1.04041205e-02   4.70285836e-05]\n",
      " [  1.31610840e-02   5.47404802e-04]\n",
      " [  1.07876407e-05   2.32286702e-07]\n",
      " [  4.50092968e-02   1.81968547e-04]]\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pymc3 as pm\n",
    "\n",
    "# artificial data\n",
    "k = 2\n",
    "data = np.array([1, 2.2, 2.5, 2.8, 4, 6, 7.2, 7.5, 7.8, 9])\n",
    "ndata = len(data)\n",
    "\n",
    "# model\n",
    "alpha = 0.1 * np.ones((ndata, k))\n",
    "with pm.Model() as model:\n",
    "    p = pm.Dirichlet('p', alpha, shape=(ndata, k))\n",
    "    mu = pm.Normal('mu', mu=5, sd=3, shape=k)\n",
    "    sd = pm.Uniform('sd', lower=0.1, upper=0.5, shape=k)\n",
    "    categ = pm.Categorical('categ', p=p, shape=ndata)\n",
    "    obs = pm.Normal('obs',\n",
    "                    mu=mu[categ],\n",
    "                    sd=sd[categ],\n",
    "                    observed=data)\n",
    "\n",
    "    step1 = pm.Metropolis(vars=[p, sd, mu, obs])\n",
    "    step2 = pm.ElemwiseCategorical(vars=[categ])\n",
    "\n",
    "    tr = pm.sample(100, step=[step1, step2])\n",
    "    print(tr['p'][-1, :])"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
